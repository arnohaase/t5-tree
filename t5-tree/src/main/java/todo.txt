todo
----
* TreeLeaf (or TreeNode(isLeaf=true))
* useFlexibleStyling(default=false)
* sample: department, section, employee (nicely styled) from loops --> search

* listeners on different parts / possibility to inject the different parts of a tree (e.g. for lazy loading of parts of a tree, or open / close by double clicking the title)
* distinguish between tr:TreeFolder and tr:TreeLeaf
* special css class for last child element of a node in a tree --> make special rendering possible
* replace "arbitrary content" with TreeLeaf --> at least indentation
* 'expanded'/'collapsed' instead of 'opened'/'closed'
* push tree elements onto the Environment?
* looped example for explicit tree - department, section, employee
* Attribute showFlexibleStyling (with default=false) --> reduce HTML by default(?)
* separate out a TreeStyleModel?
* provide acccess to the different parts of each tree node --> allow clients to register listeners

* checked tree
  * styling
  * performSubmit() on check (!)
  * load all children when a parent is checked / unchecked? Make a parent check box indeterminate if there are unloaded descendents?
  * use parent checked state for checked state of lazily loaded nodes? But how? We really need to know if the parent node's state is indeterminate - unsure if even that helps
  
* TreeNode
//TODO konfigurierbar, ob nur +/- oder die ganze Titelzeile auf- und zuklappen
//TODO Animation optimieren: zunaechst +/- Icon auf "transition"-Icon setzen, dann Animation, dann auf anderes Icon setzen
//TODO JS Contribution, die Elemente "children-of-{id}" und "descendents-of-{id}"-Klassen fuer Kinder / Enkel von TreeNodes erzeugt - oder ThreadLocal beim Rendering im Server, der mithaelt?
//TODO class or optional block as default for before-row-content